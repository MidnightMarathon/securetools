/* General body and container styling */
body {
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background-color: #f0f2f5;
    margin: 0;
    padding: 20px;
    box-sizing: border-box;
}

#game-container {
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    padding: 30px;
    text-align: center;
    width: 100%;
    max-width: 1200px; /* Adjust max-width as needed for your layout */
    display: flex;
    flex-direction: column;
    align-items: center;
}

h1 {
    color: #333;
    margin-bottom: 20px;
}

.info-panel {
    display: flex;
    justify-content: space-around;
    width: 100%;
    max-width: 600px;
    margin-bottom: 30px;
    font-size: 1.1em;
    color: #555;
}

.info-item span {
    font-weight: bold;
    color: #007bff;
}

#target-state {
    font-size: 1.8em;
    font-weight: bold;
    color: #28a745; /* Green for active target */
    margin-bottom: 25px;
    min-height: 1.8em; /* Prevent layout shift when text changes */
}

/* Map Container Styling */
#map-container {
    width: 100%;
    max-width: 1000px; /* SVG viewBox width */
    height: auto; /* Maintain aspect ratio */
    border: 1px solid #ddd;
    border-radius: 5px;
    overflow: hidden; /* Ensures any overflow from the SVG is hidden */
}

#map-container svg {
    display: block; /* Remove extra space below SVG */
    width: 100%;
    height: 100%;
}

/* SVG Path Styling (default for all states) */
/* The fill/stroke properties set here will be the default for states not affected by special classes */
.map-container path {
    fill: #cfd8dc; /* Light blue-grey for default states */
    stroke: #607d8b; /* Darker blue-grey for borders */
    stroke-width: 1px;
    /* ******************************************************************* */
    /* *** MODIFIED LINE BELOW: Removed 'fill' and 'stroke-width' from transition *** */
    transition: filter 0.3s ease, transform 0.3s ease; 
    /* ******************************************************************* */
    cursor: pointer;
}

/* Hover effect for clickable states */
.map-container path.hover-state {
    fill: #a0c4ff !important; /* Lighter blue on hover */
    stroke-width: 2px; /* Make the border thicker on hover */
    filter: drop-shadow(0 0 5px rgba(160, 196, 255, 0.8)); /* Subtle glow */
}

/* State Feedback Classes */
.map-container path.correct {
    fill: #a8df8e; /* Light green for correct guess */
    pointer-events: none; /* No clicks after correct */
}

.map-container path.partial {
    fill: #fdfd96; /* Light yellow for correct after misses */
    pointer-events: none; /* No clicks after correct */
}

.map-container path.incorrect-temp {
    animation: flashRed 0.8s ease-out forwards;
}

}

.map-container path.fail {
    fill: #ff6666; /* Red for failed states */
    animation: pulseRed 1.5s infinite alternate; /* Pulsating effect */
}

.map-container path.given-up {
    fill: #8b0000; /* Darker red for given up states */
    pointer-events: none; /* No clicks after given up */
}

/* Keyframes for animations */
@keyframes flashRed {
    0% {
        fill: #ff6666 !important; /* Start red and FORCE it to override other fills */
        stroke: #ff0000 !important; /* Also flash the border red */
        stroke-width: 3px !important; /* Make border thicker */
    }
    100% {
        fill: #cfd8dc; /* End at default state color */
        stroke: #607d8b; /* End at default border color */
        stroke-width: 1px; /* End at default border width */
    }
}

@keyframes pulseRed {
    0% { fill: #ff6666; } /* Brighter red */
    100% { fill: #cc0000; } /* Darker red */
}
