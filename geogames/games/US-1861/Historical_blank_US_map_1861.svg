// script.js

const mapContainer = document.getElementById("map-container");
const targetStateEl = document.getElementById("target-state");
const scoreEl = document.getElementById("score");
const totalStatesEl = document.getElementById("total-states");
const percentageEl = document.getElementById("percentage");

let states = [];
let currentTarget = "";
let score = 0;
let totalStates = 0;

// List of state names matching the SVG path IDs exactly
// You need to fill in all states present in your SVG with exact IDs (case-sensitive)
const stateNames = {
  Alabama: "Alabama",
  Alaska: "Alaska",
  Arizona: "Arizona",
  Arkansas: "Arkansas",
  California: "California",
  Colorado: "Colorado",
  Connecticut: "Connecticut",
  Delaware: "Delaware",
  Florida: "Florida",
  Georgia: "Georgia",
  Hawaii: "Hawaii",
  Idaho: "Idaho",
  Illinois: "Illinois",
  Indiana: "Indiana",
  Iowa: "Iowa",
  Kansas: "Kansas",
  Kentucky: "Kentucky",
  Louisiana: "Louisiana",
  Maine: "Maine",
  Maryland: "Maryland",
  Massachusetts: "Massachusetts",
  Michigan: "Michigan",
  Minnesota: "Minnesota",
  Mississippi: "Mississippi",
  Missouri: "Missouri",
  Montana: "Montana",
  Nebraska: "Nebraska",
  Nevada: "Nevada",
  NewHampshire: "New Hampshire",
  NewJersey: "New Jersey",
  NewMexico: "New Mexico",
  NewYork: "New York",
  NorthCarolina: "North Carolina",
  NorthDakota: "North Dakota",
  Ohio: "Ohio",
  Oklahoma: "Oklahoma",
  Oregon: "Oregon",
  Pennsylvania: "Pennsylvania",
  RhodeIsland: "Rhode Island",
  SouthCarolina: "South Carolina",
  SouthDakota: "South Dakota",
  Tennessee: "Tennessee",
  Texas: "Texas",
  Utah: "Utah",
  Vermont: "Vermont",
  Virginia: "Virginia",
  Washington: "Washington",
  WestVirginia: "West Virginia",
  Wisconsin: "Wisconsin",
  Wyoming: "Wyoming",
};

// Load the SVG map from file and initialize the game
async function loadMap() {
  const response = await fetch("Historical_blank_US_map_1861.svg");
  const svgText = await response.text();

  mapContainer.innerHTML = svgText;

  // Select all <path> elements with an ID matching our stateNames keys
  states = Array.from(
    mapContainer.querySelectorAll("path[id]")
  ).filter((path) => stateNames.hasOwnProperty(path.id));

  totalStates = states.length;
  totalStatesEl.textContent = totalStates;

  // Remove inline fill styles for default look
  states.forEach((state) => {
    state.style.fill = "#eeeeec"; // or empty string "" to use default SVG color
    state.style.cursor = "pointer";

    // Remove any inline style attributes if you want clean styling control
    state.removeAttribute("style");

    // Add click listener
    state.addEventListener("click", () => {
      handleStateClick(state.id);
    });

    // Optional: add hover effect
    state.addEventListener("mouseenter", () => {
      state.style.fill = "#b0c4de";
    });
    state.addEventListener("mouseleave", () => {
      state.style.fill = "#eeeeec";
    });
  });

  pickNewTarget();
}

// Pick a new random target state for the user to find
function pickNewTarget() {
  const randomIndex = Math.floor(Math.random() * states.length);
  currentTarget = states[randomIndex].id;
  targetStateEl.textContent = stateNames[currentTarget] || currentTarget;
}

// Handle clicking on a state
function handleStateClick(clickedId) {
  if (clickedId === currentTarget) {
    score++;
    scoreEl.textContent = score;

    // Optionally highlight correct selection briefly
    const correctState = mapContainer.querySelector(`#${CSS.escape(clickedId)}`);
    if (correctState) {
      correctState.style.fill = "limegreen";
      setTimeout(() => {
        correctState.style.fill = "#eeeeec";
      }, 500);
    }

    pickNewTarget();
  } else {
    // Optionally highlight wrong selection briefly
    const wrongState = mapContainer.querySelector(`#${CSS.escape(clickedId)}`);
    if (wrongState) {
      wrongState.style.fill = "tomato";
      setTimeout(() => {
        wrongState.style.fill = "#eeeeec";
      }, 500);
    }
  }
  updatePercentage();
}

function updatePercentage() {
  const pct = totalStates > 0 ? ((score / totalStates) * 100).toFixed(1) : 0;
  percentageEl.textContent = pct + "%";
}

// Initialize on page load
window.addEventListener("DOMContentLoaded", () => {
  loadMap();
});
